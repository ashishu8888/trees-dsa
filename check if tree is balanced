
#include<bits/stdc++.h>
#include<queue>
using namespace std;
int num ;

 struct node{
    int data;
   struct node *left;
    struct node *right;
}*newnode;

 node* createTree(){
     node* root = new node;
    root->left = NULL;
    root->right = NULL;
   cout<<"enter data\n";
   cin>>num;


    if(num == -1)
    return NULL;

    root->data = num;

    cout<<"enter data to the left of "<<root->data<<"\n";
    root->left = createTree();

    cout<<"enter data to the right of "<<root->data<<"\n";
    root->right = createTree();
}
int max(int x,int y){
    if(x>=y)
    return x;
    
    return y;
}
int height_binTree(struct node* root){
    if(root == NULL)
    return 0;

    else{
        return (1+max(height_binTree(root->left) , height_binTree(root->right)));
    }
}
// ************naive soln(O(n^2))*****************
bool isBalanced(node* root){
    if(root == NULL)
    return true;

    int lh = height_binTree(root->left);
    int rh = height_binTree(root->right);
    return (abs(lh-rh) <= 1 && isBalanced(root->left) && isBalanced(root->right));

}
//********optimized soln O(n)*************
int isBalanced_optimized(node* root){

    if(root == NULL)
    return 0;

    int lh = isBalanced(root->left);
    if(lh == -1)
    return -1;

    int rh = isBalanced(root->right);

    if(abs(lh-rh) > 1)
    return -1;

    else
    return max(lh,rh) + 1;

}
int main(){
    node* root = createTree();
   bool check = isBalanced(root);
   if(check) cout<<"Yes";
   else cout<<"No";
   
    int x = isBalanced_optimized(root);
   if(x == -1)
   cout<<"No";
   else cout<<"Yes";

}
